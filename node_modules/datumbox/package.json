{
  "name": "datumbox",
  "description": "DatumBox API Wrapper in Nodejs",
  "keywords": [
    "npm",
    "datumbox",
    "analysis",
    "sentiment",
    "wrapper"
  ],
  "main": "./lib/main",
  "author": {
    "name": "Hamza Waqas",
    "email": "hamzawaqas@live.com",
    "url": "http://github.com/ArkeologeN"
  },
  "version": "1.0.1",
  "engines": {
    "node": ">=0.6"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/ArkeologeN/node-datumbox.git"
  },
  "bugs": {
    "url": "https://github.com/ArkeologeN/node-datumbox/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://raw.github.com/ArkeologeN/node-datumbox/master/LICENSE"
    }
  ],
  "dependencies": {
    "request": "~2.29.0",
    "async": "~0.2.9",
    "lodash": "~2.4.1"
  },
  "readme": "# DatumBox API for Node.js\n[DatumBox](http://www.datumbox.com/ \"DatumBox Website\")\n\n## Use as defined [DatumBox Sandbox](http://www.datumbox.com/app/webroot/api-sandbox/ \"DatumBox Sandbox API Browser\")\n\nThis module is designed to make the DatumBox API available in Node.js. Its pretty inspired and ported from PHP Wrapper.\n\nWhat is the Datumbox API?\n=======================\n\nThe Datumbox is a web service which allows you to use our tools from your website, software or mobile application. The API gives you access to all of the supported functions of our service. In this page you will find all the information that you need in order to use our API, fully implemented code samples and the latest API Documentation.\n\nOur Web Service uses \"REST-Like\" RPC-style operations over HTTP POST requests with parameters URL encoded into the request and its response is encoded in JSON. It is designed to be easy to use and you can implement it in any model computer language that allows you generating web requests.\n\nHow to use the API Client?\n=======================\n\nAll you need to do is download the sample code, edit example.php and place your API Key. To get an API Key sign up to datumbox.com service and visit the API Access panel in your profile.\n\nGetting Started\n=================\n\nInitialize the module with your api key.\n```javascript\nvar datum = require('datumbox').factory(\"API_KEY_HERE\");\n```\n\nThis big blast we added in version `1.0.1` is, you can now make `asynchronous` parallel service request from `DatumBox` on your text. How?\n\n```javascript\ndatum.parallel(\n    \"So, do you dare to find different sentiments of me in one request?\", \n    ['SentimentAnalysis', 'TwitterSentimentAnalysis', 'GenderDetection'],\n   function(err, results) {\n       if ( err )\n        return console.error(err);\n        \n        // results is [] and have the output in same service format.\n   }\n);\n```\n\nServices values that are available for batch should be within\n```javascript\n'SentimentAnalysis', 'TwitterSentimentAnalysis', 'SubjectivityAnalysis',\n'TopicClassification', 'SpamDetection', 'AdultContentDetection',\n'ReadabilityAssessment', 'LanguageDetection', 'CommercialDetection',\n'EducationalDetection', 'GenderDetection', 'TextExtraction',\n```\n\n## Sentiment Analysis\n\nIdentifies the Sentiment of the Document\n\n```javascript\ndatum.sentimentAnalysis(\"Can you find my sentiments please?\", function(err, data) {\n    if ( err )\n        return console.log(err);\n\n    console.log(data);  // Remarks here.\n});\n```\n\n\n## Twitter Sentiment Analysis\n\nIdentifies the Sentiment of Twitter Messages\n\n```javascript\ndatum.twitterSentimentAnalysis(\"Can you find my #sentiments #please?\", function(err, data) {\n    if ( err )\n        return console.log(err);\n\n    console.log(data);  // Remarks here.\n});\n```\n\n## Subjectivity Analysis\n\nClassifies Document as Subjective or Objective\n\n```javascript\ndatum.subjectivityAnalysis(\"TEXT_TO_FIND_HERE\", function(err, data) {\n    if ( err )\n        return console.log(err);\n\n    console.log(data);  // Remarks here.\n});\n```\n\n## Topic Classification\n\nIdentifies the Topic of the Document\n\n```javascript\ndatum.topicClassification(\"TEXT_TO_FIND_HERE\", function(err, data) {\n    if ( err )\n        return console.log(err);\n\n    console.log(data);  // Remarks here.\n});\n```\n\n## Spam Detection\n\nClassifies the Document as spam or nospam\n\n```javascript\ndatum.spamDetection(\"TEXT_TO_FIND_HERE\", function(err, data) {\n    if ( err )\n        return console.log(err);\n\n    console.log(data);  // Remarks here.\n});\n```\n\n## Adult Content Detection\n\nClassifies the Document as adult or noadult\n\n```javascript\ndatum.adultContentDetection(\"TEXT_TO_FIND_HERE\", function(err, data) {\n    if ( err )\n        return console.log(err);\n\n    console.log(data);  // Remarks here.\n});\n```\n\n## Readability Assessment\n\nEvaluates the Readability of the Document\n\n```javascript\ndatum.readabilityAssessment(\"TEXT_TO_FIND_HERE\", function(err, data) {\n    if ( err )\n        return console.log(err);\n\n    console.log(data);  // Remarks here.\n});\n```\n\n## Language Detection\n\nIdentifies the Language of the Document\n\n```javascript\ndatum.languageDetection(\"TEXT_TO_FIND_HERE\", function(err, data) {\n    if ( err )\n        return console.log(err);\n\n    console.log(data);  // Remarks here.\n});\n```\n\n## Commercial Detection\n\nClassifies the Document as commercial or nocommercial\n\n```javascript\ndatum.commercialDetection(\"TEXT_TO_FIND_HERE\", function(err, data) {\n    if ( err )\n        return console.log(err);\n\n    console.log(data);  // Remarks here.\n});\n```\n\n## Educational Detection\n\nClassifies the Document as educational or noeducational\n\n```javascript\ndatum.educationalDetection(\"TEXT_TO_FIND_HERE\", function(err, data) {\n    if ( err )\n        return console.log(err);\n\n    console.log(data);  // Remarks here.\n});\n```\n\n## Gender Detection\n\nGender Detection Service\n\n```javascript\ndatum.genderDetection(\"TEXT_TO_FIND_HERE\", function(err, data) {\n    if ( err )\n        return console.log(err);\n\n    console.log(data);  // Remarks here.\n});\n```\n\n## Text Extraction\n\nExtracts the clear text from Webpage\n\n```javascript\ndatum.textExtraction(\"TEXT_TO_FIND_HERE\", function(err, data) {\n    if ( err )\n        return console.log(err);\n\n    console.log(data);  // Remarks here.\n});\n```\n\n## Keyword Extraction\n\nExtracts the Keywords of the Document\n\n```javascript\ndatum.keywordExtraction(\"TEXT_TO_FIND_HERE\", \"n\", function(err, data) {\n    if ( err )\n        return console.log(err);\n\n    console.log(data);  // Remarks here.\n});\n```\n\n## Document Similarity\n\nEstimates the similarity between 2 Documents\n\n```javascript\ndatum.documentSimilarity(\"DOCUMENT_CONTENT_1\", \"DOCUMENT_CONTENT_2\",, function(err, data) {\n    if ( err )\n        return console.log(err);\n\n    console.log(data);  // Remarks here.\n});\n```\n\n## Magic Caller\n\nGet the sentiments of DatumService via magic by defining service on the fly.\n\n```javascript\ndatum.magic(\"SentimentAnalysis\", \"TEXT_TO_FIND_HERE\", function(err, data) {\n    if ( err )\n        return console.log(err);\n\n    console.log(data);  // Remarks here.\n});\n```\n\n## Contributors\n\nRight now, the project is only getting developed by:\n* [Hamza Waqas](mailto: hamzawaqas@live.com) - He lives at [@HamzaWaqas](https://twitter.com/HamzaWaqas) and you can follow him there ;-)\n* That's you!",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/ArkeologeN/node-datumbox",
  "_id": "datumbox@1.0.1",
  "dist": {
    "shasum": "5e7065c98483f19af72694e18d5fc9bcbe3282b2",
    "tarball": "http://registry.npmjs.org/datumbox/-/datumbox-1.0.1.tgz"
  },
  "_from": "datumbox@",
  "_npmVersion": "1.3.14",
  "_npmUser": {
    "name": "arkeologen",
    "email": "hamzawaqas.programmer@gmail.com"
  },
  "maintainers": [
    {
      "name": "arkeologen",
      "email": "hamzawaqas.programmer@gmail.com"
    }
  ],
  "directories": {},
  "_shasum": "5e7065c98483f19af72694e18d5fc9bcbe3282b2",
  "_resolved": "https://registry.npmjs.org/datumbox/-/datumbox-1.0.1.tgz"
}
